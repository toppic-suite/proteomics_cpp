/*
 * diagonal_header.hpp
 *
 *  Created on: Dec 30, 2013
 *      Author: xunlikun
 */

#ifndef PROT_DIAGONAL_HEADER_HPP_
#define PROT_DIAGONAL_HEADER_HPP_

#include "base/trunc.hpp"
#include "base/prot_mod.hpp"
#include "base/ptm.hpp"
#include "base/change.hpp"
#include "base/proteoform.hpp"
#include "spec/prm_peak.hpp"
#include "ptmsearch/ptm_mng.hpp"

namespace prot {

class DiagonalHeader;

typedef std::shared_ptr<DiagonalHeader> DiagonalHeaderPtr;
typedef std::vector<DiagonalHeaderPtr> DiagonalHeaderPtrVec;
typedef std::vector<DiagonalHeaderPtrVec> DiagonalHeaderPtrVec2D;
typedef std::vector<DiagonalHeaderPtrVec2D> DiagonalHeaderPtrVec3D;

class DiagonalHeader {
 public:
  DiagonalHeader(double n_term_shift,bool n_strict,
                 bool c_strict,bool n_trunc,bool c_trunc);

  DiagonalHeaderPtr clone();

  void changeNTermShift(double s){
    prot_N_term_shift_ -= s;
    pep_N_term_shift_ -= s;
    prot_C_term_shift_ +=s;
    pep_C_term_shift_+=s;
  }

  int getTruncFirstResPos() {return trunc_first_res_pos_;}

  int getMatchFirstBpPos() {return match_first_bp_pos_;}

  int getMatchLastBpPos() {return match_last_bp_pos_;}

  double getPepCTermShift() {return pep_C_term_shift_;}

  double getPepNTermShift() { return pep_N_term_shift_;}

  double getProtCTermShift() {return prot_C_term_shift_;}

  double getProtNTermShift() {return prot_N_term_shift_;}

  int getTruncLastResPos() {return trunc_last_res_pos_;}

  bool isNTrunc(){ return n_trunc_; }

  bool isCTrunc(){ return c_trunc_; }

  void setPepCTermShift(double pepCTermShift) {
    pep_C_term_shift_ = pepCTermShift;
  }

  void setPepNTermShift(double pepNTermShift) {
    pep_N_term_shift_ = pepNTermShift;
  }

  void setProtCTermShift(double protCTermShift) {
    prot_C_term_shift_ = protCTermShift;
  }

  void setProtNTermShift(double protNTermShift) {
    prot_N_term_shift_ = protNTermShift;
  }

  void setTruncFirstResPos(int truncFirstResPos) {
    trunc_first_res_pos_ = truncFirstResPos;
  }

  void setTruncLastResPos(int truncLastResPos) {
    trunc_last_res_pos_ = truncLastResPos;
  }

  void setMatchFirstBpPos(int match_first_bp_pos) {
    match_first_bp_pos_ = match_first_bp_pos;
  }

  void setMatchLastBpPos(int match_last_bp_pos) {
    match_last_bp_pos_ = match_last_bp_pos;
  }

  void setNTrunc(bool n_trunc){n_trunc_ = n_trunc;}
  void setCTrunc(bool c_trunc){c_trunc_ = c_trunc;}
  bool isNStrict(){return n_strict_;}
  bool isCStrict(){return c_strict_;}

  void setAlignPrefix(bool is_prefix){is_align_prefix_ = is_prefix;}
  void setAlignSuffix(bool is_suffix){is_align_suffix_ = is_suffix;}
  bool isAlignPrefix(){return is_align_prefix_;}
  bool isAlignSuffix(){return is_align_suffix_;}

  int getId() { return id_; }
  void setId(int id) { id_ = id; }
  void setProtNTermMatch(bool match) {prot_N_term_match_ = match;}
  void setProtCTermMatch(bool match) {prot_C_term_match_ = match;}
  void setPepNTermMatch(bool match) {pep_N_term_match_ = match;}
  void setPepCTermMatch(bool match) {pep_C_term_match_ = match;}

  bool isProtNTermMatch() {return prot_N_term_match_;}
  bool isProtCTermMatch() {return prot_C_term_match_;}
  bool isPepNTermMatch() {return pep_N_term_match_;}
  bool isPepCTermMatch() {return pep_C_term_match_;}

  void setProtTermMatch(double error_tolerance);
  void setPepTermMatch(double error_tolearance);
  void setAlignPrefixSuffix(double error_tolerance);

 private:
  int id_=0;
  // if it is generated by n_trunc shift 
  bool n_trunc_ = false;
  bool n_strict_ = false;
  int trunc_first_res_pos_=0;
  int match_first_bp_pos_=0;
  double prot_N_term_shift_=0;
  bool prot_N_term_match_ = false;
  double pep_N_term_shift_=0.0;
  bool pep_N_term_match_ = false;

  // if protNTermShift is not large 
  bool is_align_prefix_ = false;

  bool c_trunc_ = false;
  bool c_strict_ = false;
  int trunc_last_res_pos_=0;
  int match_last_bp_pos_=0;
  double prot_C_term_shift_=0.0;
  bool prot_C_term_match_ = false;
  double pep_C_term_shift_=0.0;
  bool pep_C_term_match_ = false;

  // if protCTermShift is not large 
  bool is_align_suffix_=false;
};

DiagonalHeaderPtr getDiagonalHeaderPtr(int bgn, int end, DiagonalHeaderPtr shift);
DiagonalHeaderPtrVec getNTermShiftListCommon(std::vector<double> best_shifts);
DiagonalHeaderPtrVec getNTermShiftListCompLeft(ProteoformPtr seq,PtmMngPtr mng);
DiagonalHeaderPtrVec getNTermShiftListCompRight(ProteoformPtr seq,PrmMsPtr ms_six);
void setPrefixSuffix(DiagonalHeaderPtr &header,double c_shift,ProteoformPtr seq, 
                     double term_error_tolerance, PtmMngPtr mng);
void setAlignPrefSuffic(DiagonalHeaderPtr &header,PtmMngPtr mng);
DiagonalHeaderPtrVec getNTermShiftListTruncPrefix(ProteoformPtr seq);
DiagonalHeaderPtrVec getNTermShiftListTruncsuffix(PrmMsPtr ms,ProteoformPtr seq);
DiagonalHeaderPtrVec get1dHeaders(DiagonalHeaderPtrVec2D headers);
ChangePtrVec getUnexpectedChanges(DiagonalHeaderPtrVec headers,int first,int last);


} /* namespace prot */

#endif /* DIAGONAL_HEADER_HPP_ */
